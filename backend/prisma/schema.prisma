// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)
  verifyToken   String?   @unique
  resetToken    String?   @unique
  resetTokenExp DateTime?
  points        Int       @default(0)
  streak        Int       @default(0)
  lastLoginDate DateTime  @default(now())
  lastActive    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  preferences   Json?     // Store user preferences as JSON
  settings      Json?     // User settings and preferences
  googleId      String?   @unique
  githubId      String?   @unique
  oauthTokens   OAuthTokens[]
  
  // Relations with cascading deletes
  translations  Translation[] @relation("UserTranslations")
  stories       Story[]       @relation("UserStories")
  comments      Comment[]     @relation("UserComments")
  addedWords    Word[]        @relation("AddedWords")
  auditLogs     AuditLog[]    @relation("UserAuditLogs")
  notifications Notification[] @relation("UserNotifications")
  achievements  Achievement[]  @relation("UserAchievements")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([lastActive])
}

model Language {
  id           String  @id @default(cuid())
  name         String  @db.VarChar(100)
  code         String  @unique @db.Char(2)
  isEndangered Boolean @default(false)
  
  // Relations
  words        Word[]   @relation("LanguageWords")
  stories      Story[]  @relation("LanguageStories")

  @@index([code])
  @@index([isEndangered])
}

model Word {
  id          String    @id @default(cuid())
  original    String    @db.VarChar(255)
  languageId  String
  language    Language  @relation("LanguageWords", fields: [languageId], references: [id], onDelete: Restrict)
  difficulty  Int       @default(1) @db.TinyInt
  approved    Boolean   @default(false)
  addedById   String
  addedBy     User      @relation("AddedWords", fields: [addedById], references: [id], onDelete: Restrict)
  
  // Relations with cascading deletes
  translations Translation[] @relation("WordTranslations")
  examples     Example[]     @relation("WordExamples")
  synonyms     Synonym[]     @relation("WordSynonyms")
  antonyms     Antonym[]     @relation("WordAntonyms")
  tags         WordTag[]     @relation("WordTags")

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([original, languageId])
  @@index([languageId])
  @@index([addedById])
  @@index([approved])
  @@index([difficulty])
}

model Translation {
  id          String   @id @default(cuid())
  wordId      String
  word        Word     @relation("WordTranslations", fields: [wordId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation("UserTranslations", fields: [userId], references: [id], onDelete: Restrict)
  translation String   @db.Text
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([wordId])
  @@index([userId])
  @@index([verified])
}

model Story {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(255)
  content     String    @db.Text
  languageId  String
  language    Language  @relation("LanguageStories", fields: [languageId], references: [id], onDelete: Restrict)
  userId      String
  user        User      @relation("UserStories", fields: [userId], references: [id], onDelete: Restrict)
  type        StoryType
  status      StoryStatus @default(PENDING)
  moderatedBy String?
  moderatedAt DateTime?
  moderationReason String?   @db.Text
  
  // Relations with cascading deletes
  comments    Comment[] @relation("StoryComments")
  ratings     Rating[]  @relation("StoryRatings")
  tags        StoryTag[] @relation("StoryTags")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([languageId])
  @@index([userId])
  @@index([type])
  @@index([status])
  @@fulltext([title, content])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Restrict)
  storyId   String
  story     Story    @relation("StoryComments", fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([storyId])
}

model Example {
  id          String   @id @default(cuid())
  wordId      String
  word        Word     @relation("WordExamples", fields: [wordId], references: [id], onDelete: Cascade)
  content     String   @db.Text
  translation String   @db.Text
  createdAt   DateTime @default(now())

  @@index([wordId])
}

model Synonym {
  id          String   @id @default(cuid())
  wordId      String
  word        Word     @relation("WordSynonyms", fields: [wordId], references: [id], onDelete: Cascade)
  synonymWord String
  createdAt   DateTime @default(now())

  @@index([wordId])
  @@index([synonymWord])
}

model Antonym {
  id          String   @id @default(cuid())
  wordId      String
  word        Word     @relation("WordAntonyms", fields: [wordId], references: [id], onDelete: Cascade)
  antonymWord String
  createdAt   DateTime @default(now())

  @@index([wordId])
  @@index([antonymWord])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: Restrict)
  action    String   @db.VarChar(100)
  entity    String   @db.VarChar(50)
  entityId  String   @db.VarChar(50)
  details   Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String           @db.Text
  read      Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  type        String   @db.VarChar(50)
  earnedAt    DateTime @default(now())
  metadata    Json?

  @@index([userId])
  @@index([type])
  @@index([earnedAt])
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  words     WordTag[] @relation("TagWords")

  @@index([name])
}

model WordTag {
  id        String   @id @default(cuid())
  wordId    String
  word      Word     @relation("WordTags", fields: [wordId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation("TagWords", fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([wordId, tagId])
  @@index([wordId])
  @@index([tagId])
}

model Rating {
  id        String   @id @default(cuid())
  storyId   String
  story     Story    @relation("StoryRatings", fields: [storyId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)
  rating    Int      @db.TinyInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storyId, userId])
  @@index([storyId])
  @@index([userId])
  @@index([rating])
}

model StoryTag {
  id        String   @id @default(cuid())
  storyId   String
  story     Story    @relation("StoryTags", fields: [storyId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation("TagStories", fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([storyId, tagId])
  @@index([storyId])
  @@index([tagId])
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  blockedAt DateTime @default(now())
  expiresAt DateTime?
  
  @@index([ip])
  @@index([expiresAt])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  ip        String
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([ip])
}

model OAuthTokens {
  id            Int      @id @default(autoincrement())
  userId        Int
  provider      String
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
}

enum UserRole {
  ADMIN
  CURATOR
  CONTRIBUTOR
  USER
  VISITOR
}

enum StoryType {
  STORY
  PROVERB
  POEM
  SONG
}

enum NotificationType {
  WORD_APPROVED
  TRANSLATION_ADDED
  STORY_COMMENT
  ACHIEVEMENT
  SYSTEM
}

enum StoryStatus {
  PENDING
  APPROVED
  REJECTED
}